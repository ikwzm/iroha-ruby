# Autogenerated from a Treetop grammar. Edits may be lost.


module Iroha::Builder::Exp

module Exp
  include Treetop::Runtime

  def root
    @root ||= :design
  end

  module Design0
    def design_contents
      elements[0]
    end
  end

  module Design1
    def get
      design   = Iroha::IDesign.new
      channels = Array.new
      design_contents.elements.each{ |element|
        info = element.get(design)
        if info.class == Iroha::IParams then
          design._add_param(info)
          next
        end
        if info.class == Iroha::IModule then
	    design._add_module(info)
          next
        end
        if info.class == Iroha::IChannel then
          design._add_channel(info)
	    next
        end
      }
	return design
    end
  end

  def _nt_design
    start_index = index
    if node_cache[:design].has_key?(index)
      cached = node_cache[:design][index]
      if cached
        node_cache[:design][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2 = index
      r3 = _nt_params
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r2 = r3
      else
        r4 = _nt_module
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r2 = r4
        else
          r5 = _nt_channel
          if r5
            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
            r2 = r5
          else
            @index = i2
            r2 = nil
          end
        end
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Design0)
      r0.extend(Design1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:design][start_index] = r0

    r0
  end

  module Params0
    def params
      elements[4]
    end

  end

  module Params1
    def get(design)
      i_params = Iroha::IParams.new
      params.elements.each { |param|
        i_params.update(param.get(design))
      }
      i_params
    end
  end

  def _nt_params
    start_index = index
    if node_cache[:params].has_key?(index)
      cached = node_cache[:params][index]
      if cached
        node_cache[:params][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('PARAMS', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'PARAMS\'')
            r6 = nil
          end
          s0 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_param
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s0 << r7
            if r7
              r10 = _nt_space
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r9
              if r9
                if (match_len = has_terminal?(')', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r11 = nil
                end
                s0 << r11
                if r11
                  r13 = _nt_space
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r12
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Params0)
      r0.extend(Params1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:params][start_index] = r0

    r0
  end

  module Param0
    def param_key
      elements[3]
    end

    def space
      elements[4]
    end

    def param_value
      elements[5]
    end

  end

  module Param1
    def get(design)
      {param_key.get(design) => param_value.get(design)}
    end
  end

  def _nt_param
    start_index = index
    if node_cache[:param].has_key?(index)
      cached = node_cache[:param][index]
      if cached
        node_cache[:param][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_param_key
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_param_value
              s0 << r8
              if r8
                r10 = _nt_space
                if r10
                  r9 = r10
                else
                  r9 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r9
                if r9
                  if (match_len = has_terminal?(')', false, index))
                    r11 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\')\'')
                    r11 = nil
                  end
                  s0 << r11
                  if r11
                    r13 = _nt_space
                    if r13
                      r12 = r13
                    else
                      r12 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r12
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Param0)
      r0.extend(Param1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:param][start_index] = r0

    r0
  end

  module ParamKey0
    def key
      elements[0]
    end
  end

  module ParamKey1
    def get(design) key.text_value;     end
  end

  def _nt_param_key
    start_index = index
    if node_cache[:param_key].has_key?(index)
      cached = node_cache[:param_key][index]
      if cached
        node_cache[:param_key][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_label
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ParamKey0)
      r0.extend(ParamKey1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:param_key][start_index] = r0

    r0
  end

  module ParamValue0
    def val
      elements[0]
    end
  end

  module ParamValue1
    def get(design) val.text_value.to_i;end
  end

  module ParamValue2
    def val
      elements[0]
    end
  end

  module ParamValue3
    def get(design) val.text_value     ;end
  end

  def _nt_param_value
    start_index = index
    if node_cache[:param_value].has_key?(index)
      cached = node_cache[:param_value][index]
      if cached
        node_cache[:param_value][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_number
    s1 << r2
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ParamValue0)
      r1.extend(ParamValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i3, s3 = index, []
      r4 = _nt_graph
      s3 << r4
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(ParamValue2)
        r3.extend(ParamValue3)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r0 = r3
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:param_value][start_index] = r0

    r0
  end

  module Module0
    def space1
      elements[4]
    end

    def module_id
      elements[5]
    end

    def space2
      elements[6]
    end

    def module_name
      elements[7]
    end

    def contents
      elements[8]
    end

  end

  module Module1
    def get(design)
      parent = nil
      params = Iroha::IParams.new
      tables = Array.new
      contents.elements.each{ |element|
        info = element.get(design)
        if info.class == Iroha::IParams then
          params.update(info)
          next
        end
        if info.class == Iroha::ITable then
          tables.push(info)
          next
        end
        if info.key?(:PARENT) then
          abort "(PARENT #{info[:PARENT]} ... ) is multi definition." if parent.nil? == false
          parent = info[:PARENT]
          next
        end
      }
      Iroha::IModule.new(module_id.get(design), module_name.get(design), parent, params, tables)
    end
  end

  def _nt_module
    start_index = index
    if node_cache[:module].has_key?(index)
      cached = node_cache[:module][index]
      if cached
        node_cache[:module][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('MODULE', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'MODULE\'')
            r6 = nil
          end
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_module_id
              s0 << r8
              if r8
                r9 = _nt_space
                s0 << r9
                if r9
                  r10 = _nt_module_name
                  s0 << r10
                  if r10
                    s11, i11 = [], index
                    loop do
                      i12 = index
                      r13 = _nt_parent_module
                      if r13
                        r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
                        r12 = r13
                      else
                        r14 = _nt_params
                        if r14
                          r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
                          r12 = r14
                        else
                          r15 = _nt_table
                          if r15
                            r15 = SyntaxNode.new(input, (index-1)...index) if r15 == true
                            r12 = r15
                          else
                            @index = i12
                            r12 = nil
                          end
                        end
                      end
                      if r12
                        s11 << r12
                      else
                        break
                      end
                    end
                    r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                    s0 << r11
                    if r11
                      r17 = _nt_space
                      if r17
                        r16 = r17
                      else
                        r16 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r16
                      if r16
                        if (match_len = has_terminal?(')', false, index))
                          r18 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\')\'')
                          r18 = nil
                        end
                        s0 << r18
                        if r18
                          r20 = _nt_space
                          if r20
                            r19 = r20
                          else
                            r19 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s0 << r19
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Module0)
      r0.extend(Module1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:module][start_index] = r0

    r0
  end

  module ModuleId0
    def id
      elements[0]
    end
  end

  module ModuleId1
    def get(design) id.text_value.to_i;end
  end

  def _nt_module_id
    start_index = index
    if node_cache[:module_id].has_key?(index)
      cached = node_cache[:module_id][index]
      if cached
        node_cache[:module_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_number
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ModuleId0)
      r0.extend(ModuleId1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:module_id][start_index] = r0

    r0
  end

  module ModuleName0
    def name
      elements[0]
    end
  end

  module ModuleName1
    def get(design) name.text_value;end
  end

  def _nt_module_name
    start_index = index
    if node_cache[:module_name].has_key?(index)
      cached = node_cache[:module_name][index]
      if cached
        node_cache[:module_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_label
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ModuleName0)
      r0.extend(ModuleName1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:module_name][start_index] = r0

    r0
  end

  module ParentModule0
    def space
      elements[4]
    end

    def module_id
      elements[5]
    end

  end

  module ParentModule1
    def get(design)
      {:PARENT => module_id.get(design)}
    end
  end

  def _nt_parent_module
    start_index = index
    if node_cache[:parent_module].has_key?(index)
      cached = node_cache[:parent_module][index]
      if cached
        node_cache[:parent_module][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('PARENT', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'PARENT\'')
            r6 = nil
          end
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_module_id
              s0 << r8
              if r8
                r10 = _nt_space
                if r10
                  r9 = r10
                else
                  r9 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r9
                if r9
                  if (match_len = has_terminal?(')', false, index))
                    r11 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\')\'')
                    r11 = nil
                  end
                  s0 << r11
                  if r11
                    r13 = _nt_space
                    if r13
                      r12 = r13
                    else
                      r12 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r12
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ParentModule0)
      r0.extend(ParentModule1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parent_module][start_index] = r0

    r0
  end

  module Table0
    def space
      elements[0]
    end

    def table_name
      elements[1]
    end
  end

  module Table1
    def space
      elements[4]
    end

    def table_id
      elements[5]
    end

    def table_name_entry
      elements[6]
    end

    def contents
      elements[7]
    end

  end

  module Table2
    def get(design)
      resources     = Array.new
      registers     = Array.new
      states        = Array.new
      if table_name_entry.empty? == false then
        table_name  = table_name_entry.table_name.get(design)
      else
        table_name  = nil
      end
      init_state_id = nil
      contents.elements.each{ |element|
        info = element.get(design)
        if info.key?(:RESOURCES) then
	    resources.concat(info[:RESOURCES])
          next
        end
        if info.key?(:REGISTERS) then
	    registers.concat(info[:REGISTERS])
          next
        end
        if info.key?(:STATE) then
	    states.push(info[:STATE])
          next
        end
        if info.key?(:INITIAL) then
          abort "(INITIAL #{info[:INITIAL]}) is multi definition." if init_state_id.nil? == false
          init_state_id = info[:INITIAL]
          next
        end
      }
      Iroha::ITable.new(table_id.get(design), table_name, resources, registers, states, init_state_id)
    end
  end

  def _nt_table
    start_index = index
    if node_cache[:table].has_key?(index)
      cached = node_cache[:table][index]
      if cached
        node_cache[:table][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('TABLE', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'TABLE\'')
            r6 = nil
          end
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_table_id
              s0 << r8
              if r8
                i10, s10 = index, []
                r11 = _nt_space
                s10 << r11
                if r11
                  r12 = _nt_table_name
                  s10 << r12
                end
                if s10.last
                  r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                  r10.extend(Table0)
                else
                  @index = i10
                  r10 = nil
                end
                if r10
                  r9 = r10
                else
                  r9 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r9
                if r9
                  s13, i13 = [], index
                  loop do
                    i14 = index
                    r15 = _nt_resources
                    if r15
                      r15 = SyntaxNode.new(input, (index-1)...index) if r15 == true
                      r14 = r15
                    else
                      r16 = _nt_registers
                      if r16
                        r16 = SyntaxNode.new(input, (index-1)...index) if r16 == true
                        r14 = r16
                      else
                        r17 = _nt_initial_state
                        if r17
                          r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
                          r14 = r17
                        else
                          r18 = _nt_state
                          if r18
                            r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
                            r14 = r18
                          else
                            @index = i14
                            r14 = nil
                          end
                        end
                      end
                    end
                    if r14
                      s13 << r14
                    else
                      break
                    end
                  end
                  r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  s0 << r13
                  if r13
                    r20 = _nt_space
                    if r20
                      r19 = r20
                    else
                      r19 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r19
                    if r19
                      if (match_len = has_terminal?(')', false, index))
                        r21 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\')\'')
                        r21 = nil
                      end
                      s0 << r21
                      if r21
                        r23 = _nt_space
                        if r23
                          r22 = r23
                        else
                          r22 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s0 << r22
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Table1)
      r0.extend(Table2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:table][start_index] = r0

    r0
  end

  module TableId0
    def id
      elements[0]
    end
  end

  module TableId1
    def get(design) id.text_value.to_i;end
  end

  def _nt_table_id
    start_index = index
    if node_cache[:table_id].has_key?(index)
      cached = node_cache[:table_id][index]
      if cached
        node_cache[:table_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_number
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TableId0)
      r0.extend(TableId1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:table_id][start_index] = r0

    r0
  end

  module TableName0
  end

  module TableName1
    def get(design) ""             ; end
  end

  module TableName2
    def name
      elements[0]
    end
  end

  module TableName3
    def get(design) name.text_value; end
  end

  def _nt_table_name
    start_index = index
    if node_cache[:table_name].has_key?(index)
      cached = node_cache[:table_name][index]
      if cached
        node_cache[:table_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?('(', false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('\'(\'')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_space
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if (match_len = has_terminal?(')', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('\')\'')
          r5 = nil
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(TableName0)
      r1.extend(TableName1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i6, s6 = index, []
      r7 = _nt_label
      s6 << r7
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(TableName2)
        r6.extend(TableName3)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:table_name][start_index] = r0

    r0
  end

  module Resources0
    def resources
      elements[4]
    end

  end

  module Resources1
    def get(design)
      # puts "==> RESOURCES"
      {:RESOURCES => resources.elements.map{|resource| resource.get(design)}}
    end
  end

  def _nt_resources
    start_index = index
    if node_cache[:resources].has_key?(index)
      cached = node_cache[:resources][index]
      if cached
        node_cache[:resources][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('RESOURCES', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'RESOURCES\'')
            r6 = nil
          end
          s0 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_resource
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s0 << r7
            if r7
              r10 = _nt_space
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r9
              if r9
                if (match_len = has_terminal?(')', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r11 = nil
                end
                s0 << r11
                if r11
                  r13 = _nt_space
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r12
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Resources0)
      r0.extend(Resources1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:resources][start_index] = r0

    r0
  end

  module Resource0
    def space1
      elements[4]
    end

    def resource_id
      elements[5]
    end

    def space2
      elements[6]
    end

    def resource_class
      elements[7]
    end

    def i_type
      elements[8]
    end

    def o_type
      elements[9]
    end

    def params
      elements[10]
    end

    def option
      elements[11]
    end

  end

  module Resource1
    def get(design)
      resource_class.get(design).new(
        resource_id.get(design),
        i_type.get(design),
        o_type.get(design),
        params.get(design),
	  (option.empty? == true)? {} : option.get(design)
	)
    end
  end

  def _nt_resource
    start_index = index
    if node_cache[:resource].has_key?(index)
      cached = node_cache[:resource][index]
      if cached
        node_cache[:resource][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('RESOURCE', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'RESOURCE\'')
            r6 = nil
          end
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_resource_id
              s0 << r8
              if r8
                r9 = _nt_space
                s0 << r9
                if r9
                  r10 = _nt_resource_class
                  s0 << r10
                  if r10
                    r11 = _nt_value_types
                    s0 << r11
                    if r11
                      r12 = _nt_value_types
                      s0 << r12
                      if r12
                        r13 = _nt_params
                        s0 << r13
                        if r13
                          r15 = _nt_resource_option
                          if r15
                            r14 = r15
                          else
                            r14 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s0 << r14
                          if r14
                            r17 = _nt_space
                            if r17
                              r16 = r17
                            else
                              r16 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s0 << r16
                            if r16
                              if (match_len = has_terminal?(')', false, index))
                                r18 = true
                                @index += match_len
                              else
                                terminal_parse_failure('\')\'')
                                r18 = nil
                              end
                              s0 << r18
                              if r18
                                r20 = _nt_space
                                if r20
                                  r19 = r20
                                else
                                  r19 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s0 << r19
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Resource0)
      r0.extend(Resource1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:resource][start_index] = r0

    r0
  end

  module ResourceId0
    def id
      elements[0]
    end
  end

  module ResourceId1
    def get(design) id.text_value.to_i;end
  end

  def _nt_resource_id
    start_index = index
    if node_cache[:resource_id].has_key?(index)
      cached = node_cache[:resource_id][index]
      if cached
        node_cache[:resource_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_number
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ResourceId0)
      r0.extend(ResourceId1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:resource_id][start_index] = r0

    r0
  end

  module ResourceClass0
    def name
      elements[0]
    end
  end

  module ResourceClass1
    def get(design)
      class_name = name.text_value
      if design._resource_classes.key?(class_name) == false then
        abort "Unknown resource class #{class_name}"
	end
	design._resource_classes[class_name]
    end
  end

  def _nt_resource_class
    start_index = index
    if node_cache[:resource_class].has_key?(index)
      cached = node_cache[:resource_class][index]
      if cached
        node_cache[:resource_class][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_label
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ResourceClass0)
      r0.extend(ResourceClass1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:resource_class][start_index] = r0

    r0
  end

  module ResourceOption0
    def label
      elements[3]
    end

    def params
      elements[4]
    end

  end

  module ResourceOption1
    def get(design)
      {label.text_value.to_sym => params.elements.map{|param| param.get(design)}}
    end
  end

  def _nt_resource_option
    start_index = index
    if node_cache[:resource_option].has_key?(index)
      cached = node_cache[:resource_option][index]
      if cached
        node_cache[:resource_option][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_label
          s0 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_resource_option_params
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s0 << r7
            if r7
              r10 = _nt_space
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r9
              if r9
                if (match_len = has_terminal?(')', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r11 = nil
                end
                s0 << r11
                if r11
                  r13 = _nt_space
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r12
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ResourceOption0)
      r0.extend(ResourceOption1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:resource_option][start_index] = r0

    r0
  end

  module ResourceOptionParams0
    def val
      elements[1]
    end

  end

  module ResourceOptionParams1
    def get(design) val.text_value.to_i  ;end
  end

  module ResourceOptionParams2
    def val
      elements[1]
    end

  end

  module ResourceOptionParams3
    def get(design) val.text_value.to_sym;end
  end

  module ResourceOptionParams4
    def val
      elements[1]
    end

  end

  module ResourceOptionParams5
    def get(design) val.get(design)      ;end
  end

  def _nt_resource_option_params
    start_index = index
    if node_cache[:resource_option_params].has_key?(index)
      cached = node_cache[:resource_option_params][index]
      if cached
        node_cache[:resource_option_params][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r3 = _nt_space
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      r4 = _nt_number
      s1 << r4
      if r4
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ResourceOptionParams0)
      r1.extend(ResourceOptionParams1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i7, s7 = index, []
      r9 = _nt_space
      if r9
        r8 = r9
      else
        r8 = instantiate_node(SyntaxNode,input, index...index)
      end
      s7 << r8
      if r8
        r10 = _nt_graph
        s7 << r10
        if r10
          r12 = _nt_space
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s7 << r11
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(ResourceOptionParams2)
        r7.extend(ResourceOptionParams3)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
        r0 = r7
      else
        i13, s13 = index, []
        r15 = _nt_space
        if r15
          r14 = r15
        else
          r14 = instantiate_node(SyntaxNode,input, index...index)
        end
        s13 << r14
        if r14
          r16 = _nt_value_type
          s13 << r16
          if r16
            r18 = _nt_space
            if r18
              r17 = r18
            else
              r17 = instantiate_node(SyntaxNode,input, index...index)
            end
            s13 << r17
          end
        end
        if s13.last
          r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
          r13.extend(ResourceOptionParams4)
          r13.extend(ResourceOptionParams5)
        else
          @index = i13
          r13 = nil
        end
        if r13
          r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
          r0 = r13
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:resource_option_params][start_index] = r0

    r0
  end

  module TypeClass0
    def name
      elements[0]
    end
  end

  module TypeClass1
    def get(design)
      class_name = name.text_value
      if design._type_classes.key?(class_name) == false then
        abort "Unknown type class #{class_name}"
	end
	design._type_classes[class_name]
    end
  end

  def _nt_type_class
    start_index = index
    if node_cache[:type_class].has_key?(index)
      cached = node_cache[:type_class][index]
      if cached
        node_cache[:type_class][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_label
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TypeClass0)
      r0.extend(TypeClass1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type_class][start_index] = r0

    r0
  end

  module ValueTypeOptions0
    def key
      elements[1]
    end

  end

  module ValueTypeOptions1
    def get(design); key.text_value     ; end
  end

  module ValueTypeOptions2
    def num
      elements[1]
    end

  end

  module ValueTypeOptions3
    def get(design); num.text_value.to_i; end
  end

  def _nt_value_type_options
    start_index = index
    if node_cache[:value_type_options].has_key?(index)
      cached = node_cache[:value_type_options][index]
      if cached
        node_cache[:value_type_options][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r3 = _nt_space
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      r4 = _nt_label
      s1 << r4
      if r4
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ValueTypeOptions0)
      r1.extend(ValueTypeOptions1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i7, s7 = index, []
      r9 = _nt_space
      if r9
        r8 = r9
      else
        r8 = instantiate_node(SyntaxNode,input, index...index)
      end
      s7 << r8
      if r8
        r10 = _nt_number
        s7 << r10
        if r10
          r12 = _nt_space
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s7 << r11
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(ValueTypeOptions2)
        r7.extend(ValueTypeOptions3)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:value_type_options][start_index] = r0

    r0
  end

  module ValueType0
    def type_class
      elements[3]
    end

    def options
      elements[4]
    end

  end

  module ValueType1
    def get(design)
      option = options.elements.map{|element| element.get(design)}
      type_class.get(design).new(*option)
    end
  end

  def _nt_value_type
    start_index = index
    if node_cache[:value_type].has_key?(index)
      cached = node_cache[:value_type][index]
      if cached
        node_cache[:value_type][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_type_class
          s0 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_value_type_options
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s0 << r7
            if r7
              r10 = _nt_space
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r9
              if r9
                if (match_len = has_terminal?(')', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r11 = nil
                end
                s0 << r11
                if r11
                  r13 = _nt_space
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r12
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ValueType0)
      r0.extend(ValueType1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:value_type][start_index] = r0

    r0
  end

  module ValueTypes0
    def value_types
      elements[3]
    end

  end

  module ValueTypes1
    def get(design)
      value_types.elements.map{|value_type| value_type.get(design)}
    end
  end

  def _nt_value_types
    start_index = index
    if node_cache[:value_types].has_key?(index)
      cached = node_cache[:value_types][index]
      if cached
        node_cache[:value_types][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          s6, i6 = [], index
          loop do
            r7 = _nt_value_type
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s0 << r6
          if r6
            r9 = _nt_space
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
            if r8
              if (match_len = has_terminal?(')', false, index))
                r10 = true
                @index += match_len
              else
                terminal_parse_failure('\')\'')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_space
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ValueTypes0)
      r0.extend(ValueTypes1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:value_types][start_index] = r0

    r0
  end

  module Registers0
    def registers
      elements[4]
    end

  end

  module Registers1
    def get(design)
      # puts "==> REGISTERS"
      {:REGISTERS => registers.elements.map{|register| register.get(design)}}
    end
  end

  def _nt_registers
    start_index = index
    if node_cache[:registers].has_key?(index)
      cached = node_cache[:registers][index]
      if cached
        node_cache[:registers][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('REGISTERS', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'REGISTERS\'')
            r6 = nil
          end
          s0 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_register
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s0 << r7
            if r7
              r10 = _nt_space
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r9
              if r9
                if (match_len = has_terminal?(')', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r11 = nil
                end
                s0 << r11
                if r11
                  r13 = _nt_space
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r12
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Registers0)
      r0.extend(Registers1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:registers][start_index] = r0

    r0
  end

  module Register0
    def space1
      elements[4]
    end

    def register_id
      elements[5]
    end

    def space2
      elements[6]
    end

    def register_name
      elements[7]
    end

    def space3
      elements[8]
    end

    def register_class
      elements[9]
    end

    def space4
      elements[10]
    end

    def value_type
      elements[11]
    end

    def value
      elements[13]
    end

  end

  module Register1
    def get(design)
      Iroha::IRegister.new(register_id.get(design), register_name.get(design), register_class.get(design), value_type.get(design), value.get(design))
    end
  end

  def _nt_register
    start_index = index
    if node_cache[:register].has_key?(index)
      cached = node_cache[:register][index]
      if cached
        node_cache[:register][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('REGISTER', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'REGISTER\'')
            r6 = nil
          end
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_register_id
              s0 << r8
              if r8
                r9 = _nt_space
                s0 << r9
                if r9
                  r10 = _nt_register_name
                  s0 << r10
                  if r10
                    r11 = _nt_space
                    s0 << r11
                    if r11
                      r12 = _nt_register_class
                      s0 << r12
                      if r12
                        r13 = _nt_space
                        s0 << r13
                        if r13
                          r14 = _nt_value_type
                          s0 << r14
                          if r14
                            s15, i15 = [], index
                            loop do
                              r16 = _nt_space
                              if r16
                                s15 << r16
                              else
                                break
                              end
                            end
                            r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                            s0 << r15
                            if r15
                              r17 = _nt_value_or_nil
                              s0 << r17
                              if r17
                                r19 = _nt_space
                                if r19
                                  r18 = r19
                                else
                                  r18 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s0 << r18
                                if r18
                                  if (match_len = has_terminal?(')', false, index))
                                    r20 = true
                                    @index += match_len
                                  else
                                    terminal_parse_failure('\')\'')
                                    r20 = nil
                                  end
                                  s0 << r20
                                  if r20
                                    r22 = _nt_space
                                    if r22
                                      r21 = r22
                                    else
                                      r21 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s0 << r21
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Register0)
      r0.extend(Register1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:register][start_index] = r0

    r0
  end

  module RegisterId0
    def id
      elements[0]
    end
  end

  module RegisterId1
    def get(design) id.text_value.to_i;end
  end

  def _nt_register_id
    start_index = index
    if node_cache[:register_id].has_key?(index)
      cached = node_cache[:register_id][index]
      if cached
        node_cache[:register_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_number
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RegisterId0)
      r0.extend(RegisterId1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:register_id][start_index] = r0

    r0
  end

  module RegisterName0
  end

  module RegisterName1
    def get(design) ""             ;end
  end

  module RegisterName2
    def name
      elements[0]
    end
  end

  module RegisterName3
    def get(design) name.text_value;end
  end

  def _nt_register_name
    start_index = index
    if node_cache[:register_name].has_key?(index)
      cached = node_cache[:register_name][index]
      if cached
        node_cache[:register_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?('(', false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('\'(\'')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        r4 = _nt_space
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        if (match_len = has_terminal?(')', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('\')\'')
          r5 = nil
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(RegisterName0)
      r1.extend(RegisterName1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i6, s6 = index, []
      r7 = _nt_label
      s6 << r7
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(RegisterName2)
        r6.extend(RegisterName3)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:register_name][start_index] = r0

    r0
  end

  module RegisterClass0
    def get(design) :REG   ; end
  end

  module RegisterClass1
    def get(design) :CONST ; end
  end

  module RegisterClass2
    def get(design) :WIRE  ; end
  end

  def _nt_register_class
    start_index = index
    if node_cache[:register_class].has_key?(index)
      cached = node_cache[:register_class][index]
      if cached
        node_cache[:register_class][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('REG', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      r1.extend(RegisterClass0)
      @index += match_len
    else
      terminal_parse_failure('\'REG\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('CONST', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        r2.extend(RegisterClass1)
        @index += match_len
      else
        terminal_parse_failure('\'CONST\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?('WIRE', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          r3.extend(RegisterClass2)
          @index += match_len
        else
          terminal_parse_failure('\'WIRE\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:register_class][start_index] = r0

    r0
  end

  module InitialState0
    def space
      elements[4]
    end

    def state_id
      elements[5]
    end

  end

  module InitialState1
    def get(design)
      {:INITIAL => state_id.get(design)}
    end
  end

  def _nt_initial_state
    start_index = index
    if node_cache[:initial_state].has_key?(index)
      cached = node_cache[:initial_state][index]
      if cached
        node_cache[:initial_state][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('INITIAL', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'INITIAL\'')
            r6 = nil
          end
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_state_id
              s0 << r8
              if r8
                r10 = _nt_space
                if r10
                  r9 = r10
                else
                  r9 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r9
                if r9
                  if (match_len = has_terminal?(')', false, index))
                    r11 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\')\'')
                    r11 = nil
                  end
                  s0 << r11
                  if r11
                    r13 = _nt_space
                    if r13
                      r12 = r13
                    else
                      r12 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r12
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(InitialState0)
      r0.extend(InitialState1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:initial_state][start_index] = r0

    r0
  end

  module State0
    def space
      elements[4]
    end

    def state_id
      elements[5]
    end

    def instructions
      elements[6]
    end

  end

  module State1
    def get(design)
      {:STATE => Iroha::IState.new(state_id.get(design), nil, instructions.elements.map{|insn| insn.get(design)})}
    end
  end

  def _nt_state
    start_index = index
    if node_cache[:state].has_key?(index)
      cached = node_cache[:state][index]
      if cached
        node_cache[:state][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('STATE', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'STATE\'')
            r6 = nil
          end
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_state_id
              s0 << r8
              if r8
                s9, i9 = [], index
                loop do
                  r10 = _nt_instruction
                  if r10
                    s9 << r10
                  else
                    break
                  end
                end
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                s0 << r9
                if r9
                  r12 = _nt_space
                  if r12
                    r11 = r12
                  else
                    r11 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r11
                  if r11
                    if (match_len = has_terminal?(')', false, index))
                      r13 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\')\'')
                      r13 = nil
                    end
                    s0 << r13
                    if r13
                      r15 = _nt_space
                      if r15
                        r14 = r15
                      else
                        r14 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r14
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(State0)
      r0.extend(State1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:state][start_index] = r0

    r0
  end

  module StateId0
    def id
      elements[0]
    end
  end

  module StateId1
    def get(design) id.text_value.to_i;end
  end

  def _nt_state_id
    start_index = index
    if node_cache[:state_id].has_key?(index)
      cached = node_cache[:state_id][index]
      if cached
        node_cache[:state_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_number
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StateId0)
      r0.extend(StateId1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:state_id][start_index] = r0

    r0
  end

  module Instruction0
    def space1
      elements[4]
    end

    def instruction_id
      elements[5]
    end

    def space2
      elements[6]
    end

    def res_class
      elements[7]
    end

    def space3
      elements[8]
    end

    def resource_id
      elements[9]
    end

    def op_list
      elements[10]
    end

    def next_states
      elements[11]
    end

    def input_registers
      elements[12]
    end

    def output_registers
      elements[13]
    end

  end

  module Instruction1
    def get(design)
      Iroha::IInstruction.new(instruction_id.get(design) ,
                              res_class.text_value       ,
                              resource_id.get(design)    ,
                              op_list.get(design)        ,
                              next_states.get(design)    ,
                              input_registers.get(design),
                              output_registers.get(design))
    end
  end

  def _nt_instruction
    start_index = index
    if node_cache[:instruction].has_key?(index)
      cached = node_cache[:instruction][index]
      if cached
        node_cache[:instruction][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('INSN', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'INSN\'')
            r6 = nil
          end
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_instruction_id
              s0 << r8
              if r8
                r9 = _nt_space
                s0 << r9
                if r9
                  r10 = _nt_label
                  s0 << r10
                  if r10
                    r11 = _nt_space
                    s0 << r11
                    if r11
                      r12 = _nt_resource_id
                      s0 << r12
                      if r12
                        r13 = _nt_label_list
                        s0 << r13
                        if r13
                          r14 = _nt_number_list
                          s0 << r14
                          if r14
                            r15 = _nt_number_list
                            s0 << r15
                            if r15
                              r16 = _nt_number_list
                              s0 << r16
                              if r16
                                r18 = _nt_space
                                if r18
                                  r17 = r18
                                else
                                  r17 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s0 << r17
                                if r17
                                  if (match_len = has_terminal?(')', false, index))
                                    r19 = true
                                    @index += match_len
                                  else
                                    terminal_parse_failure('\')\'')
                                    r19 = nil
                                  end
                                  s0 << r19
                                  if r19
                                    r21 = _nt_space
                                    if r21
                                      r20 = r21
                                    else
                                      r20 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s0 << r20
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Instruction0)
      r0.extend(Instruction1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:instruction][start_index] = r0

    r0
  end

  module InstructionId0
    def id
      elements[0]
    end
  end

  module InstructionId1
    def get(design) id.text_value.to_i;end
  end

  def _nt_instruction_id
    start_index = index
    if node_cache[:instruction_id].has_key?(index)
      cached = node_cache[:instruction_id][index]
      if cached
        node_cache[:instruction_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_number
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(InstructionId0)
      r0.extend(InstructionId1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:instruction_id][start_index] = r0

    r0
  end

  module Channel0
    def space1
      elements[4]
    end

    def channel_id
      elements[5]
    end

    def space2
      elements[6]
    end

    def value_type
      elements[7]
    end

    def rp
      elements[9]
    end

    def wp
      elements[11]
    end

  end

  module Channel1
    def get(design)
      r_res = rp.get(design)
      w_res = wp.get(design)
      Iroha::IChannel.new(channel_id.get(design),
                          value_type.get(design),
                          r_res[:MODULE  ]      ,
                          r_res[:TABLE   ]      ,
                          r_res[:RESOURCE]      ,
                          w_res[:MODULE  ]      ,
                          w_res[:TABLE   ]      ,
                          w_res[:RESOURCE])
    end
  end

  def _nt_channel
    start_index = index
    if node_cache[:channel].has_key?(index)
      cached = node_cache[:channel][index]
      if cached
        node_cache[:channel][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if (match_len = has_terminal?('CHANNEL', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'CHANNEL\'')
            r6 = nil
          end
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_channel_id
              s0 << r8
              if r8
                r9 = _nt_space
                s0 << r9
                if r9
                  r10 = _nt_value_type
                  s0 << r10
                  if r10
                    s11, i11 = [], index
                    loop do
                      r12 = _nt_space
                      if r12
                        s11 << r12
                      else
                        break
                      end
                    end
                    r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                    s0 << r11
                    if r11
                      r13 = _nt_channel_point
                      s0 << r13
                      if r13
                        s14, i14 = [], index
                        loop do
                          r15 = _nt_space
                          if r15
                            s14 << r15
                          else
                            break
                          end
                        end
                        r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                        s0 << r14
                        if r14
                          r16 = _nt_channel_point
                          s0 << r16
                          if r16
                            r18 = _nt_space
                            if r18
                              r17 = r18
                            else
                              r17 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s0 << r17
                            if r17
                              if (match_len = has_terminal?(')', false, index))
                                r19 = true
                                @index += match_len
                              else
                                terminal_parse_failure('\')\'')
                                r19 = nil
                              end
                              s0 << r19
                              if r19
                                r21 = _nt_space
                                if r21
                                  r20 = r21
                                else
                                  r20 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s0 << r20
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Channel0)
      r0.extend(Channel1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:channel][start_index] = r0

    r0
  end

  module ChannelId0
    def id
      elements[0]
    end
  end

  module ChannelId1
    def get(design) id.text_value.to_i;end
  end

  def _nt_channel_id
    start_index = index
    if node_cache[:channel_id].has_key?(index)
      cached = node_cache[:channel_id][index]
      if cached
        node_cache[:channel_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_number
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ChannelId0)
      r0.extend(ChannelId1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:channel_id][start_index] = r0

    r0
  end

  module ChannelPoint0
    def module_id
      elements[3]
    end

    def space1
      elements[4]
    end

    def table_id
      elements[5]
    end

    def space2
      elements[6]
    end

    def resource_id
      elements[7]
    end

  end

  module ChannelPoint1
    def get(design)
      {:MODULE => module_id.get(design), :TABLE => table_id.get(design), :RESOURCE => resource_id.get(design)}
    end
  end

  def _nt_channel_point
    start_index = index
    if node_cache[:channel_point].has_key?(index)
      cached = node_cache[:channel_point][index]
      if cached
        node_cache[:channel_point][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_module_id
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_table_id
              s0 << r8
              if r8
                r9 = _nt_space
                s0 << r9
                if r9
                  r10 = _nt_resource_id
                  s0 << r10
                  if r10
                    r12 = _nt_space
                    if r12
                      r11 = r12
                    else
                      r11 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r11
                    if r11
                      if (match_len = has_terminal?(')', false, index))
                        r13 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\')\'')
                        r13 = nil
                      end
                      s0 << r13
                      if r13
                        r15 = _nt_space
                        if r15
                          r14 = r15
                        else
                          r14 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s0 << r14
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ChannelPoint0)
      r0.extend(ChannelPoint1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:channel_point][start_index] = r0

    r0
  end

  module NumberList0
  end

  module NumberList1
    def get(design)
      []
    end
  end

  module NumberList2
    def space
      elements[0]
    end

    def number
      elements[1]
    end
  end

  module NumberList3
    def first_number
      elements[3]
    end

    def rest
      elements[4]
    end

  end

  module NumberList4
    def get(design)
      [first_number.text_value.to_i] + rest.elements.map{|element| element.number.text_value.to_i}
    end
  end

  def _nt_number_list
    start_index = index
    if node_cache[:number_list].has_key?(index)
      cached = node_cache[:number_list][index]
      if cached
        node_cache[:number_list][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r3 = _nt_space
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      if (match_len = has_terminal?('(', false, index))
        r4 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r4 = nil
      end
      s1 << r4
      if r4
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s1 << r5
        if r5
          if (match_len = has_terminal?(')', false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('\')\'')
            r7 = nil
          end
          s1 << r7
          if r7
            r9 = _nt_space
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(NumberList0)
      r1.extend(NumberList1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i10, s10 = index, []
      r12 = _nt_space
      if r12
        r11 = r12
      else
        r11 = instantiate_node(SyntaxNode,input, index...index)
      end
      s10 << r11
      if r11
        if (match_len = has_terminal?('(', false, index))
          r13 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r13 = nil
        end
        s10 << r13
        if r13
          r15 = _nt_space
          if r15
            r14 = r15
          else
            r14 = instantiate_node(SyntaxNode,input, index...index)
          end
          s10 << r14
          if r14
            r16 = _nt_number
            s10 << r16
            if r16
              s17, i17 = [], index
              loop do
                i18, s18 = index, []
                r19 = _nt_space
                s18 << r19
                if r19
                  r20 = _nt_number
                  s18 << r20
                end
                if s18.last
                  r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                  r18.extend(NumberList2)
                else
                  @index = i18
                  r18 = nil
                end
                if r18
                  s17 << r18
                else
                  break
                end
              end
              r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
              s10 << r17
              if r17
                r22 = _nt_space
                if r22
                  r21 = r22
                else
                  r21 = instantiate_node(SyntaxNode,input, index...index)
                end
                s10 << r21
                if r21
                  if (match_len = has_terminal?(')', false, index))
                    r23 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\')\'')
                    r23 = nil
                  end
                  s10 << r23
                  if r23
                    r25 = _nt_space
                    if r25
                      r24 = r25
                    else
                      r24 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s10 << r24
                  end
                end
              end
            end
          end
        end
      end
      if s10.last
        r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
        r10.extend(NumberList3)
        r10.extend(NumberList4)
      else
        @index = i10
        r10 = nil
      end
      if r10
        r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
        r0 = r10
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:number_list][start_index] = r0

    r0
  end

  module LabelList0
  end

  module LabelList1
    def get(design)
      []
    end
  end

  module LabelList2
    def space
      elements[0]
    end

    def label
      elements[1]
    end
  end

  module LabelList3
    def first_label
      elements[3]
    end

    def rest
      elements[4]
    end

  end

  module LabelList4
    def get(design)
      [first_label.text_value] + rest.elements.map{|element| element.label.text_value}
    end
  end

  def _nt_label_list
    start_index = index
    if node_cache[:label_list].has_key?(index)
      cached = node_cache[:label_list][index]
      if cached
        node_cache[:label_list][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r3 = _nt_space
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      if (match_len = has_terminal?('(', false, index))
        r4 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r4 = nil
      end
      s1 << r4
      if r4
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s1 << r5
        if r5
          if (match_len = has_terminal?(')', false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('\')\'')
            r7 = nil
          end
          s1 << r7
          if r7
            r9 = _nt_space
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(LabelList0)
      r1.extend(LabelList1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i10, s10 = index, []
      r12 = _nt_space
      if r12
        r11 = r12
      else
        r11 = instantiate_node(SyntaxNode,input, index...index)
      end
      s10 << r11
      if r11
        if (match_len = has_terminal?('(', false, index))
          r13 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r13 = nil
        end
        s10 << r13
        if r13
          r15 = _nt_space
          if r15
            r14 = r15
          else
            r14 = instantiate_node(SyntaxNode,input, index...index)
          end
          s10 << r14
          if r14
            r16 = _nt_label
            s10 << r16
            if r16
              s17, i17 = [], index
              loop do
                i18, s18 = index, []
                r19 = _nt_space
                s18 << r19
                if r19
                  r20 = _nt_label
                  s18 << r20
                end
                if s18.last
                  r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                  r18.extend(LabelList2)
                else
                  @index = i18
                  r18 = nil
                end
                if r18
                  s17 << r18
                else
                  break
                end
              end
              r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
              s10 << r17
              if r17
                r22 = _nt_space
                if r22
                  r21 = r22
                else
                  r21 = instantiate_node(SyntaxNode,input, index...index)
                end
                s10 << r21
                if r21
                  if (match_len = has_terminal?(')', false, index))
                    r23 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\')\'')
                    r23 = nil
                  end
                  s10 << r23
                  if r23
                    r25 = _nt_space
                    if r25
                      r24 = r25
                    else
                      r24 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s10 << r24
                  end
                end
              end
            end
          end
        end
      end
      if s10.last
        r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
        r10.extend(LabelList3)
        r10.extend(LabelList4)
      else
        @index = i10
        r10 = nil
      end
      if r10
        r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
        r0 = r10
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:label_list][start_index] = r0

    r0
  end

  module ValueOrNil0
    def key
      elements[0]
    end
  end

  module ValueOrNil1
    def get(design) key.text_value     ;end
  end

  module ValueOrNil2
    def num
      elements[0]
    end
  end

  module ValueOrNil3
    def get(design) num.text_value.to_i;end
  end

  module ValueOrNil4
  end

  module ValueOrNil5
    def get(design) ""                 ;end
  end

  def _nt_value_or_nil
    start_index = index
    if node_cache[:value_or_nil].has_key?(index)
      cached = node_cache[:value_or_nil][index]
      if cached
        node_cache[:value_or_nil][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_label
    s1 << r2
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ValueOrNil0)
      r1.extend(ValueOrNil1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i3, s3 = index, []
      r4 = _nt_number
      s3 << r4
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(ValueOrNil2)
        r3.extend(ValueOrNil3)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r0 = r3
      else
        i5, s5 = index, []
        if (match_len = has_terminal?('(', false, index))
          r6 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r6 = nil
        end
        s5 << r6
        if r6
          s7, i7 = [], index
          loop do
            r8 = _nt_space
            if r8
              s7 << r8
            else
              break
            end
          end
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          s5 << r7
          if r7
            if (match_len = has_terminal?(')', false, index))
              r9 = true
              @index += match_len
            else
              terminal_parse_failure('\')\'')
              r9 = nil
            end
            s5 << r9
          end
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(ValueOrNil4)
          r5.extend(ValueOrNil5)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
          r0 = r5
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:value_or_nil][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[ \\t\\n\\r]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[ \\t\\n\\r]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  module Label0
  end

  def _nt_label
    start_index = index
    if node_cache[:label].has_key?(index)
      cached = node_cache[:label][index]
      if cached
        node_cache[:label][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[a-zA-Z_]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z_]')
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_-]'] ||= Regexp.new(gr), :regexp, index)
          r4 = true
          @index += 1
        else
          terminal_parse_failure('[a-zA-Z0-9_-]')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Label0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:label][start_index] = r0

    r0
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        node_cache[:number][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[0-9]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:number][start_index] = r0

    r0
  end

  def _nt_graph
    start_index = index
    if node_cache[:graph].has_key?(index)
      cached = node_cache[:graph][index]
      if cached
        node_cache[:graph][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[.,+-/%!?@#$%^&*|~`=-{}\\\\\\[\\]a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[.,+-/%!?@#$%^&*|~`=-{}\\\\\\[\\]a-zA-Z0-9_]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:graph][start_index] = r0

    r0
  end

end

class ExpParser < Treetop::Runtime::CompiledParser
  include Exp
end


end