module Iroha

grammar Exp

  rule design
    design_contents:(params / module / channel)* {
      def get
        design   = Iroha::IDesign.new
        channels = Array.new
        design_contents.elements.each{ |element|
          info = element.get(design)
          if info.class == Iroha::IResource::Params then
            design._add_param(info)
            next
          end
          if info.class == Iroha::IModule then
	    design._add_module(info)
            next
          end
          if info.class == Iroha::IChannel then
            design._add_channel(info)
	    next
          end
        }
	return design
      end
    }
  end

  rule params
    space? '(' space? 'PARAMS' params:param* space? ')' space? {
      def get(design)
        resource_params = Iroha::IResource::Params.new
        params.elements.each { |resource_param|
          resource_params.update(resource_param.get(design))
        }
        resource_params
      end
    }
  end

  rule param
    space? '(' space? param_key space param_value space? ')' space? {
      def get(design)
        {param_key.get(design) => param_value.get(design)}
      end
    }
  end

  rule param_key
    key:label  {def get(design) key.text_value;     end}
  end

  rule param_value 
    val:number {def get(design) val.text_value.to_i;end} /
    val:graph  {def get(design) val.text_value     ;end}
  end

  rule module
    space? '(' space? 'MODULE' space module_id space module_name contents:(parent_module / params / table)* space? ')' space? {
      def get(design)
        parent = nil
        params = Iroha::IResource::Params.new
        tables = Array.new
        contents.elements.each{ |element|
          info = element.get(design)
          if info.class == Iroha::IResource::Params then
            params.update(info)
            next
          end
          if info.class == Iroha::ITable then
            tables.push(info)
            next
          end
          if info.key?(:PARENT) then
            abort "(PARENT #{info[:PARENT]} ... ) is multi definition." if parent != nil
            parent = info[:PARENT]
            next
          end
        }
        Iroha::IModule.new(module_id.get(design), module_name.get(design), parent, params, tables)
      end
    }
  end

  rule module_id
    id:number  {def get(design) id.text_value.to_i;end}
  end

  rule module_name
    name:label {def get(design) name.text_value   ;end}
  end

  rule parent_module
    space? '(' space? 'PARENT' space module_id space? ')' space? {
      def get(design)
        {:PARENT => module_id.get(design)}
      end
    }
  end

  rule table
    space? '(' space? 'TABLE' space table_id contents:(resources / registers / initial_state / state)* space? ')' space? {
      def get(design)
        resources     = Array.new
        registers     = Array.new
        states        = Array.new
        init_state_id = nil
        contents.elements.each{ |element|
          info = element.get(design)
          if info.key?(:RESOURCES) then
	    resources.concat(info[:RESOURCES])
            next
          end
          if info.key?(:REGISTERS) then
	    registers.concat(info[:REGISTERS])
            next
          end
          if info.key?(:STATE) then
	    states.push(info[:STATE])
            next
          end
          if info.key?(:INITIAL) then
            abort "(INITIAL #{info[:INITIAL]}) is multi definition." if init_state_id != nil
            init_state_id = info[:INITIAL]
            next
          end
        }
        Iroha::ITable.new(table_id.get(design), nil, resources, registers, states, init_state_id)
      end
    }
  end

  rule table_id
    id:number  {def get(design) id.text_value.to_i;end}
  end

  rule resources
    space? '(' space? 'RESOURCES' resources:resource* space? ')' space? {
      def get(design)
        # puts "==> RESOURCES"
        {:RESOURCES => resources.elements.map{|resource| resource.get(design)}}
      end
    }
  end

  rule resource
    space? '(' space? 'RESOURCE' space resource_id space resource_class i_type:value_types o_type:value_types params option:resource_option? space? ')' space? {
        def get(design)
        resource_class.get(design).new(
          resource_id.get(design),
          i_type.get(design),
          o_type.get(design),
          params.get(design),
	  (option.empty? == true)? {} : option.get(design)
	)
      end
    }
  end
  
  rule resource_id
    id:number  {def get(design) id.text_value.to_i;end}
  end

  rule resource_class
    name:label {
      def get(design)
        class_name = name.text_value
        if design._resource_classes.key?(class_name) == false then
          abort "Unknown resource class #{class_name}"
	end
	design._resource_classes[class_name]
      end
    }
  end

  rule resource_option
    array_desc          /
    callee_task_desc    /
    foreign_reg_desc    
  end

  rule array_desc 
    space? '(' space? 'ARRAY' space address_width:number space value_type space* array_ownership space array_mem_type space? ')' space? {
      def get(design)
        is_external = (array_ownership.get(design) == :EXTERNAL)
	is_ram      = (array_mem_type.get(design)  == :RAM     )
        {:ARRAY => {:ADDR_WIDTH => address_width.text_value.to_i, :VALUE_TYPE => value_type.get(design), :EXTERNAL => is_external, :RAM => is_ram}}
      end
    }
  end

  rule array_ownership
    'EXTERNAL' { def get(design) :EXTERNAL; end} /
    'INTERNAL' { def get(design) :INTERNAL; end}
  end

  rule array_mem_type
    'RAM' { def get(design) :RAM; end} /
    'ROM' { def get(design) :ROM; end}
  end

  rule callee_task_desc
    space? '(' space? 'CALLEE-TABLE' space module_id space table_id space? ')' space? {
      def get(design)
        {:'CALLEE-TABLE' => {:MODULE => module_id.get(design), :TABLE => table_id.get(design)}}
      end
    }
  end

  rule foreign_reg_desc
    space? '(' space? 'FOREIGN-REG' space module_id space table_id space register_id space? ')' space? {
      def get(design)
        {:'FOREIGN-REG' => {:MODULE => module_id.get(design), :TABLE => table_id.get(design), :REGISTER => register_id.get(design)}}
      end
    }
  end

  rule value_type
    space? '(' space? type:label space width:number space? ')' space? {
      def get(design)
        if    (type.text_value == "UINT") then
          Iroha::IValueType.new(false, width.text_value.to_i)
        elsif (type.text_value == "INT" ) then
          Iroha::IValueType.new(true , width.text_value.to_i)
        else
          abort "Invalid value type #{type.text_value}."
        end
      end
    }
  end

  rule value_types
    space? '(' space? value_types:value_type* space? ')' space? {
      def get(design)
        value_types.elements.map{|value_type| value_type.get(design)}
      end
    }
  end

  rule registers
    space? '(' space? 'REGISTERS' registers:register* space? ')' space? {
      def get(design)
        # puts "==> REGISTERS"
        {:REGISTERS => registers.elements.map{|register| register.get(design)}}
      end
    }
  end

  rule register
    space? '(' space? 'REGISTER' space register_id space register_name space register_class space value_type space* value:value_or_nil space? ')' space? {
      def get(design)
        Iroha::IRegister.new(register_id.get(design), register_name.get(design), register_class.get(design), value_type.get(design), value.get(design))
      end
    }
  end

  rule register_id
    id:number  {def get(design) id.text_value.to_i;end}
  end

  rule register_name
    label_or_nil
  end

  rule register_class
    'REG'   {def get(design) :REG   ; end} /
    'CONST' {def get(design) :CONST ; end} /
    'WIRE'  {def get(design) :WIRE  ; end}
  end

  rule initial_state
    space? '(' space? 'INITIAL' space state_id space? ')' space? {
      def get(design)
        {:INITIAL => state_id.get(design)}
      end
    }
  end

  rule state
    space? '(' space? 'STATE' space state_id instructions:instruction* space? ')' space? {
      def get(design)
        {:STATE => Iroha::IState.new(state_id.get(design), nil, instructions.elements.map{|insn| insn.get(design)})}
      end
    }
  end

  rule state_id
    id:number  {def get(design) id.text_value.to_i;end}
  end

  rule instruction
    space? '(' space? 'INSN' space instruction_id space res_class:label space resource_id op_list:label_list next_states:number_list input_registers:number_list output_registers:number_list space? ')' space? {
      def get(design)
        Iroha::IInstruction.new(instruction_id.get(design) ,
                                res_class.text_value       ,
                                resource_id.get(design)    ,
                                op_list.get(design)        ,
                                next_states.get(design)    ,
                                input_registers.get(design),
                                output_registers.get(design))
      end
    }
  end

  rule instruction_id
    id:number  {def get(design) id.text_value.to_i;end}
  end

  rule channel
    space? '(' space? 'CHANNEL' space channel_id space value_type space* rp:channel_point space* wp:channel_point space? ')' space? {
      def get(design)
        r_res = rp.get(design)
        w_res = wp.get(design)
        Iroha::IChannel.new(channel_id.get(design),
                            value_type.get(design),
                            r_res[:MODULE  ]      ,
                            r_res[:TABLE   ]      ,
                            r_res[:RESOURCE]      ,
                            w_res[:MODULE  ]      ,
                            w_res[:TABLE   ]      ,
                            w_res[:RESOURCE])
      end
    }
  end

  rule channel_id
    id:number  {def get(design) id.text_value.to_i;end}
  end

  rule channel_point
    space? '(' space? module_id space table_id space resource_id space? ')' space? {
      def get(design)
        {:MODULE => module_id.get(design), :TABLE => table_id.get(design), :RESOURCE => resource_id.get(design)}
      end
    }
  end

  rule number_list
    space? '(' space* ')' space? {
      def get(design)
        []
      end
    } /
    space? '(' space? first_number:number rest:(space number:number)* space? ')' space? {
      def get(design)
        [first_number.text_value.to_i] + rest.elements.map{|element| element.number.text_value.to_i}
      end
    }
  end

  rule label_list
    space? '(' space* ')' space? {
      def get(design)
        []
      end
    } /
    space? '(' space? first_label:label rest:(space label:label)* space? ')' space? {
      def get(design)
        [first_label.text_value] + rest.elements.map{|element| element.label.text_value}
      end
    }
  end

  rule label_or_nil
    key:label      {def get(design) key.text_value;end} /
    '(' space* ')' {def get(design) ""            ;end}
  end

  rule value_or_nil
    key:label      {def get(design) key.text_value     ;end} /
    num:number     {def get(design) num.text_value.to_i;end} /
    '(' space* ')' {def get(design) ""                 ;end}
  end

  rule space
    [ \t\n\r]+
  end

  rule label
    [a-zA-Z_]+ [a-zA-Z0-9_-]*
  end

  rule number
    [0-9]+
  end

  rule graph
    [.,+-/%!?@#$%^&*|~`=-{}\\\[\]a-zA-Z0-9_]+
  end

end

end